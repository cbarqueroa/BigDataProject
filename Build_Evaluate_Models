#!/usr/bin/env python
# coding: utf-8

# In[ ]:


#imports

import numpy as np
import pandas as pd
import scipy
from math import sqrt
import matplotlib.pyplot as plt


# In[ ]:


#estimators
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn import linear_model


# In[ ]:


#model metrics
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.model_selection import cross_val_score


# In[ ]:


#cross validation
#tuve que sustituir cross validation por model selection
from sklearn.model_selection import train_test_split


# In[ ]:


#data
rawData = pd.read_csv('C:\CONCATENACION\Clients-1.csv')#, header=1)
rawData.head()
rawData.info()
rawData.describe()
rawData


# In[ ]:


#variableName = dataframe.iloc[rows,columns]
variableName = rawData.iloc[1,1]
variableName


# In[ ]:


#variableName = dataframe['coumnName']
variableName = rawData['PAY_AMT6']
variableName


# In[ ]:


#features
features = rawData.iloc[:,12:23]
print('Summary of feature sample')
features.head()


# In[ ]:


#dependent variable
depVar = rawData['PAY_AMT6']


# In[ ]:


#Training Set (Feature Space: X Training)
X_train = (features[: 1000])
X_train.head()


# In[ ]:


#Dependent Variable Training Set (y Training)
y_train = depVar[: 1000]
y_train_count = len(y_train.index)
print('The number of observations in the Y training set are:',str(y_train_count))
y_train.head()


# In[ ]:


#Testing Set (X Testing)
X_test = features[-100:]
X_test_count = len(X_test.index)
print('The number of observations in the feature testing set is:',str(X_test_count))
print(X_test.head())


# In[ ]:


#Ground Truth (y_test) 
y_test = depVar[-100:]
y_test_count = len(y_test.index)
print('The number of observations in the Y training set are:',str(y_test_count))
y_test.head()


# In[ ]:


#CROSS VALIDATION
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_train, y_train)
X_train.shape, X_test.shape


# In[ ]:


from sklearn.linear_model import LinearRegression

model = LinearRegression(n_jobs=10)


# In[ ]:


# BUILDING MODELS

#imports
#numpy,pandas,scipy, math, matplotlib
import numpy as np
import pandas as pd
import scipy
from math import sqrt
import matplotlib.pyplot as plt


# In[ ]:


#estimators
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn import linear_model


# In[ ]:


#model metrics
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.model_selection import cross_val_score


# In[ ]:


#cross validation
#from sklearn.cross_validation import train_test_split
from sklearn.model_selection import cross_val_score

#Models
modelSVR = SVR()
modelRF = RandomForestRegressor()
modelLR = LinearRegression()


# In[ ]:


#features
features = rawData.iloc[:,12:23]
print('Summary of feature sample')
features.head()


# In[ ]:


#dependent variable
print(depVar)

model.fit(X_train,y_train)


# In[ ]:


#Random Forest
modelRF.fit(X_train,y_train)

#Support Vector Regression
modelSVR.fit(X_train,y_train)

#Linear Regression
modelLR.fit(X_train,y_train)


# In[ ]:


print(cross_val_score(modelRF, X_train, y_train)) 


# In[ ]:


model.score(X_train,y_train)


# In[ ]:


#Random Forest Regression Model Fitting and Scoring
#Model Fitting
modelRF.fit(X_train,y_train)
print(cross_val_score(modelRF, X_train, y_train))
modelRF.score(X_train,y_train)


# In[ ]:


#Support Vector Regression Model Fitting and Scoring

modelSVR.fit(X_train,y_train)
print(cross_val_score(modelSVR, X_train, y_train)) 
modelSVR.score(X_train,y_train)


# In[ ]:


#Linear Regression Model Fitting and Scoring

modelLR.fit(X_train,y_train)
print(cross_val_score(modelLR, X_train, y_train)) 
modelLR.score(X_train,y_train)


# In[ ]:


#Making Predictions
predictions = modelRF.predict(X_test)


# In[ ]:


#Evaluating the Results
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from math import sqrt


# In[ ]:


rmse = sqrt(mean_squared_error(y_test, predictions))

predRsquared = r2_score(y_test,predictions)


# In[ ]:


#Make Predictions
predictions = modelRF.predict(X_test)
predRsquared = r2_score(y_test,predictions)
rmse = sqrt(mean_squared_error(y_test, predictions))
print('R Squared: %.3f' % predRsquared)
print('RMSE: %.3f' % rmse)


# In[ ]:


plt.scatter(y_test, 
            predictions,
            color=['green'],
            alpha = 0.5)
plt.xlabel('Ground Truth')
plt.ylabel('Predictions')
plt.show();


# In[ ]:


#Make Predictions
predictions = modelSVR.predict(X_test)
predRsquared = r2_score(y_test,predictions)
rmse = sqrt(mean_squared_error(y_test, predictions))
print('R Squared: %.3f' % predRsquared)
print('RMSE: %.3f' % rmse)


# In[ ]:


plt.scatter(y_test, 
            predictions, 
            alpha = 0.5)
plt.xlabel('Ground Truth')
plt.ylabel('Predictions')
plt.show();


# In[ ]:


#Make Predictions
predictions = modelLR.predict(X_test)
predRsquared = r2_score(y_test,predictions)
rmse = sqrt(mean_squared_error(y_test, predictions))
print('R Squared: %.3f' % predRsquared)
print('RMSE: %.3f' % rmse)


# In[ ]:


plt.scatter(y_test, 
            predictions, 
            alpha = 0.5)
plt.xlabel('Ground Truth')
plt.ylabel('Predictions')
plt.show();


# In[ ]:


c=np.random.random(len(predictions))
plt.scatter(y_test, 
            predictions, 
            c=c,
            alpha = 0.5)
plt.xlabel('Ground Truth')
plt.ylabel('Predictions')
plt.show();


# In[ ]:


ytestvalues=y_test.values
plt.figure(figsize=(20,8))
plt.title("Reales vrs Prediccion")
plt.plot(ytestvalues,label="Ground Truth")
plt.plot(predictions,label="Predictions")
plt.legend()
plt.show()


# In[ ]:


ytestvalues


# In[ ]:


predictions


# In[ ]:


corrMat = rawData.corr()
print(corrMat)
corrMat.style.background_gradient(cmap='coolwarm')
import numpy as np
import pandas as pd
#import pystan
import seaborn as sns

#Correlation Map
np.zeros_like(corrMat)
mask = np.zeros_like(corrMat, dtype=np.bool)
np.triu_indices_from(mask) #Return the indices for the upper-triangle of array
mask[np.triu_indices_from(mask)]= True
f, ax = plt.subplots(figsize=(12, 17))
heatmap = sns.heatmap(corrMat,
                      mask = mask,
                      square = True,
                      linewidths = .5,
                      cmap ='coolwarm',
                      cbar_kws={"shrink": .4, 'ticks' : [-1, -.5, 0, 0.5, 1]},
                      vmin = -1,
                      vmax = 1,
                      annot = True,
                      annot_kws = {"size": 9})


# In[ ]:


corrMat = features.corr()
print(corrMat)
corrMat.style.background_gradient(cmap='coolwarm')
import numpy as np
import pandas as pd
#import pystan
import seaborn as sns

#Correlation Map
np.zeros_like(corrMat)
mask = np.zeros_like(corrMat, dtype=np.bool)
np.triu_indices_from(mask) #Return the indices for the upper-triangle of array
mask[np.triu_indices_from(mask)]= True
f, ax = plt.subplots(figsize=(12, 17))
heatmap = sns.heatmap(corrMat,
                      mask = mask,
                      square = True,
                      linewidths = .5,
                      cmap ='coolwarm',
                      cbar_kws={"shrink": .4, 'ticks' : [-1, -.5, 0, 0.5, 1]},
                      vmin = -1,
                      vmax = 1,
                      annot = True,
                      annot_kws = {"size": 9})


# In[ ]:


rawData.drop(['AGE'],1).hist()
plt.show()


# In[ ]:




